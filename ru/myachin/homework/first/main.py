# ### Задача 1
# Напишите программу, которая последовательно запрашивает три целых числа с помощью `input()` (после ввода каждого
# числа пользователь нажимает «Enter» — иными словами, каждое число вводится на отдельной строке) и выводит их сумму.
#
# **Пример.**
#
# **Входные данные:**
#
#     1
#     2
#     3
#
# **Выходные данные:**
#
#     6
#
# Подсказка: вам придётся вызвать `input()` три раза.


def sum3():
    a = int(input())
    b = int(input())
    c = int(input())
    print(a + b + c)


sum3()


# ### Задача 2
# Напишите программу, которая запрашивает имя пользователя, а затем приветствует его.
#
# **Входные данные**
#
# Пользователь вводит одно слово — имя.
#
# **Выходные данные**
#
# Программа должна выводить одну строчку:
#
#     Hello, имя!
#
# где имя — введенное пользователем имя. Обратите внимание на пробел после запятой. Других пробелов быть не должно!
#
# **Примеры**
#
# _Входные данные_
#
#     Harry
#
# _Выходные данные_
#
#     Hello, Harry!
#
# _Входные данные_
#
#     Hermiona
#
# _Выходные данные_
#
#     Hello, Hermiona!
#
# _Подсказка._ Чтобы напечатать значение нескольких переменных, можно либо передать их через запятую функции `print()`
# (например, `print(a, b)`), либо преобразовать в строки и сложить с помощью оператора `+`. Избавиться от лишних
# пробелов в первом случае поможет параметр `sep` — посмотрите, например, что будет, если набрать
# `print("one", "two", sep="---")`.


def hello_Harry():
    name = input()
    print("Hello, " + name + "!")


hello_Harry()


# ### Задача 3
# Напишите программу, которая считывает длины двух катетов в прямоугольном треугольнике и выводит его гипотенузу.
# Входные числа могут быть целыми или с плавающей точкой. После ввода каждого числа пользователь нажимает «Enter».


def triangle():
    import math
    a = float(input())
    b = float(input())
    print(math.sqrt(a * a + b * b))


triangle()


# ### Задача 4 (2 балла)
#
# Дано целое число $n$. Выведите следующее за ним четное число. При решении этой задачи нельзя использовать
# условный оператор `if` и циклы.
#
# **Подсказка.** Бывает оператор целочисленного деления `//` и взятия остатка при делении `%`.
# Например, результат выполнения операции `15 % 7` равен `1`.
#
# **Примеры**
#
# _Входные данные_
#
#     7
#
# _Выходные данные_
#
#     8
#
# _Входные данные_
#
#     8
#
# _Выходные данные_
#
#     10


def next_even():
    a = int(input())
    print(a // 2 * 2 + 2)


next_even()


# ### Задача 6 (3 балла)
#
# *Это необязательная задача. Вы можете смело её пропустить.*
#
# Электронные часы показывают время в формате h:mm:ss, то есть сначала записывается количество часов
# (в 24-часовом формате), потом обязательно двузначное количество минут, затем обязательно двузначное количество
# секунд. Количество минут и секунд при необходимости дополняются до двузначного числа нулями.
#
# С начала суток прошло n секунд. Выведите, что покажут часы.
#
# Запрещается пользоваться условным оператором, циклами и любыми библиотеками, а также способами форматирования строк.
# Разрешены арифметические операции, преобразование чисел в строки и наоборот и конкатенация строк.
#
# **Входные данные**
#
# Вводится целое число $n$.
#
# **Выходные данные**
#
# Выведите ответ на задачу, соблюдая требуемый формат.
#
# **Примеры**
#
# _Входные данные_
#
#     3602
#
# _Выходные данные_
#
#     1:00:02
#
# _Входные данные_
#
#     129700
#
# _Выходные данные_
#
#     12:01:40
#


def clock():
    n = int(input())
    h = (n // 3600) % 24
    m = (n // 60) % 60
    m1 = m // 10
    s = n % 60
    s1 = s // 10
    print(str(h) + ":" + str(m1) + str(m % 10) + ":" + str(s1) + str(s % 10))


clock()


# ### Задача 7 (4 балла)
#
# *Это необязательная задача. Вы можете смело её пропустить.*
#
# Напишите программу, которая считывает два целых числа $a$ и $b$ и выводит наибольшее значение из них.
# Числа — целые от 1 до 1000.
#
# При решении задачи можно пользоваться только целочисленными арифметическими операциями `+, -, *, //, %, =`.
#
# Нельзя пользоваться нелинейными конструкциями: ветвлениями, циклами, функциями вычисления модуля,
# извлечения квадратного корня, возведения в нецелую степень.
#
# Использование функции `max` запрещено! И `min` тоже.
#
# И вообще всё запрещено, кроме того, что разрешено.


def int_max():
    # YOUR CODE HERE
    a = int(input())
    b = int(input())

    q = a // b * 3
    # q == 0 если a < b и q > 2 в противном случае
    q = q // (q - 1)
    # теперь q == 0 если a < b и q == 1 в противном случае

    p = b // a * 3
    p = p // (p - 1)
    # теперь p == 0 если b < a и p == 1 в противном случае

    # случай a != b:
    out_ne = q * a + p * b

    # случай a == b:\n",
    out_eq = a  # можно было взять и b

    # нужно выбрать правильный случай
    # если a == b, то p == q == 1, в противном случае хотя бы один из них равен нулю
    out = (1 - p * q) * out_ne + p * q * out_eq
    print(out)


int_max()


# ### Задача 8
# Ввести с клавиатуры строку и вывести на экран список, состоящий из слов в этой строке. Список необходимо вывести
# на экран просто функцией `print`, так, чтобы слова вывелись через запятую и пробел, в квадратных скобках.
#
# **Примеры**
#
# _Входные данные_
#
#     Hello World
#
# _Выходные данные_
#
#     ['Hello', 'World']
#
# _Входные данные_
#
#     This is  a      very   test! Is it okay?
#
# _Выходные данные_
#
#     ['This', 'is', 'a', 'very', 'test!', 'Is', 'it', 'okay?']


def splitter():
    s = input()
    print(s.split())


splitter()


# ### Задача 9
# Ввести с клавиатуры строку и вывести на экран список, состоящий из слов в этой строке, кроме первого и последнего.
# Список необходимо вывести на экран просто функцией `print`, так, чтобы слова вывелись через запятую и пробел, в
# квадратных скобках. Если слов меньше трёх, должен быть выведен пустой список (`[]`).
#
# В задаче не нужно использовать циклы.
#
# **Примеры**
#
# _Входные данные_
#
#     Hello Brave New World
#
# _Выходные данные_
#
#     ['Brave', 'New']
#
# _Входные данные_
#
#     This is  a      very   test! Is it okay?
#
# _Выходные данные_
#
#     ['is', 'a', 'very', 'test!', 'Is', 'it']

def no_first_last():
    s = input()
    list = s.split()
    print(list[1:len(list) - 1])


no_first_last()


# ### Задача 10
# Ввести с клавиатуры строку `s`, а затем целое число `n`. Разбить строку на слова и вывести `n`'ое слово на экран.
# Счёт начинать с единицы, то есть если в качестве `n` было введено число 1, вывести первое слово.
#
# В задаче не нужно использовать циклы.
#
# **Примеры**
#
# _Входные данные_
#
#     Hello Brave New World
#     3
#
# _Выходные данные_
#
#     New
#
# _Входные данные_
#
#     This is  a      very   test! Is it okay?
#     1
#
# _Выходные данные_
#
#     This


def word_and_number():
    s = input()
    n = int(input())
    list = s.split()
    print(list[n - 1])


word_and_number()


# ### Задача 11
# Введите с клавиатуры две строки. Разбейте первую строку на слова и добавьте в конец получившегося списка вторую
# строку целиком. Выведите получившийся список.
#
# **Пример**
#
# _Входные данные_
#
#     Hello Brave New World
#     This is a test
#
# _Выходные данные_
#
#     ['Hello', 'Brave', 'New', 'World', 'This is a test']


def add_string():
    s = input()
    s2 = input()
    list = s.split()
    list.append(s2)
    print(list)


add_string()


# ### Задача 12
# Введите с клавиатуры строку, разбейте её на слова. Выведите список из слов, записанный в обратном порядке.
#
# В этой задаче не нужно использовать циклы. Используйте метод списка `.reverse()`: изучите самостоятельно, как
# он работает.
#
# **Пример**
#
# _Входные данные_
#
#     Hello Brave New World
#
# _Выходные данные_
#
#     ['World', 'New', 'Brave', 'Hello']
#


def right_to_left():
    s = input()
    list = s.split()
    list.reverse()
    print(list)


right_to_left()
